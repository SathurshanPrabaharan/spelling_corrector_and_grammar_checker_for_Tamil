# -*- coding: utf-8 -*-
"""spellchecker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZAx3rU5YJZ8ykjeFfiiUzGbmuzZZJmA
"""

# Step 1: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

import os
from difflib import get_close_matches
import re

# Function to load words from multiple text files into a set
def load_words_from_files(file_list):
    words = set()
    for file in file_list:
        if os.path.exists(file):
            with open(file, 'r', encoding='utf-8') as f:
                for line in f:
                    words.add(line.strip())
    return words

# Function to generate n-grams from a word (using character-level n-grams)
def generate_ngrams(word, n=2):
    return [word[i:i+n] for i in range(len(word)-n+1)]

# Function to suggest similar words based on fuzzy matching and n-gram-based similarity
def suggest_correction(word, word_list, ngram_dict, n=2):
    word_ngrams = set(generate_ngrams(word, n))
    suggestions = []

    # Fuzzy matching for exact word matches first
    fuzzy_matches = get_close_matches(word, word_list, n=3, cutoff=0.8)
    if fuzzy_matches:
        suggestions.extend(fuzzy_matches)

    # N-gram based suggestions if no close match found
    if not fuzzy_matches:
        for dict_word in word_list:
            dict_ngrams = set(generate_ngrams(dict_word, n))
            common_ngrams = word_ngrams & dict_ngrams  # Intersection of n-grams
            if common_ngrams:
                suggestions.append(dict_word)

    return suggestions

# Spell checking function
def check_spelling(word, word_list, ngram_dict):
    if word in word_list:
        return f"'{word}' is spelled correctly.", word  # Return original word if correct
    else:
        suggestions = suggest_correction(word, word_list, ngram_dict)
        if suggestions:
            return f"'{word}' is misspelled. Did you mean: {', '.join(suggestions)}?", suggestions[0]
        else:
            return f"'{word}' is not in the dictionary and no suggestions found.", word

# Function to process sentences/paragraphs
def check_paragraph_spelling(paragraph, word_list, ngram_dict):
    # Split the paragraph into words using spaces and Tamil punctuation
    # This regex respects Tamil word boundaries
    words = re.findall(r'[\u0B80-\u0BFF]+', paragraph)

    # Check the spelling of each word
    results = []
    corrected_words = []
    for word in words:
        result, corrected_word = check_spelling(word, word_list, ngram_dict)
        results.append(result)  # Save detailed results
        corrected_words.append(corrected_word)  # Save corrected word

    # Reconstruct the corrected sentence
    corrected_sentence = ' '.join(corrected_words)

    return results, corrected_sentence

# Step 3: Define file paths on Google Drive
file_list = [
    '/content/drive/MyDrive/AI/all-tamil-nouns.txt',
    '/content/drive/MyDrive/AI/noun.txt',
    '/content/drive/MyDrive/AI/numbers.txt',
    '/content/drive/MyDrive/AI/tamil.txt',
    '/content/drive/MyDrive/AI/tamilwords.txt',
    '/content/drive/MyDrive/AI/verb1.txt',
    '/content/drive/MyDrive/AI/verb2.txt',
    '/content/drive/MyDrive/AI/ta_TA_5.txt',
    '/content/drive/MyDrive/AI/ta_TA_3.txt',
    '/content/drive/MyDrive/AI/ta_TA_6.txt',
    '/content/drive/MyDrive/AI/ta_TA_4.txt',
    '/content/drive/MyDrive/AI/ta_TA_7.txt',
    '/content/drive/MyDrive/AI/ta_TA_9.txt',
    '/content/drive/MyDrive/AI/ta_TA1.txt',
    '/content/drive/MyDrive/AI/ta_TA3.txt',
    '/content/drive/MyDrive/AI/ta_TA_11.txt',
    '/content/drive/MyDrive/AI/ta_TA2.txt',
    '/content/drive/MyDrive/AI/ta_TA_10.txt',
    '/content/drive/MyDrive/AI/ta_TA_13.txt',
    '/content/drive/MyDrive/AI/ta_TA_12.txt',
    '/content/drive/MyDrive/AI/ta_TA_14.txt',
    '/content/drive/MyDrive/AI/ta_TA0.txt',
    '/content/drive/MyDrive/AI/ta_TA1.txt',
    '/content/drive/MyDrive/AI/ta_TA2.txt'
]

# Step 4: Load the dictionary from Google Drive
word_list = load_words_from_files(file_list)

# Preprocess the word list into n-grams for better matching
ngram_dict = {word: generate_ngrams(word, n=2) for word in word_list}

# Example paragraph
paragraph_to_check = 'தமிழ்ங தமிழ் மொழி பரிசுத்தமானது.'  # Example Tamil sentence

# Check spelling for the entire paragraph
results, corrected_sentence = check_paragraph_spelling(paragraph_to_check, word_list, ngram_dict)

# Display detailed spell-check results
print("Detailed Spell Check Results:")
for res in results:
    print(res)

# Display the corrected sentence/paragraph
print("\nCorrected Sentence/Paragraph:")
print(corrected_sentence)